= DTR -- Distributed Test Runner

Supporting DTR version: 0.0.x

This package contains DTR, a distributed test runner program for decreasing 
time of running ruby tests, only supporting Test::Unit ruby testing framework
currently.

DTR has the following features:

* Run tests in mutli processes or on distributed machines.

* Hot plug distributed agents.

* Runtime injection, all tests run in same environment.

DTR works in two parts: Runner Agent and DTR Master.

* Runner Agent is a DRb service hosting on distributed machines to run tests. For using 'fork' to create runner process, Runner Agent can't run on Windows directly.

* DTR Master is the process finding runner service to run tests and collect test results. It works by loading 'dtr/test_unit_injection.rb' with all test files.

DTR doesn't synchronize codebase, so you need to consider using synchronize tools 
(e.g. rsync(http://samba.anu.edu.au/rsync/)) or distributed version control system
(e.g. mercurial(http://www.selenic.com/mercurial/wiki/)) to synchronize project 
files between machines. The distributed version control system Mercurial is cool for
synchronizing codebase between machines, see the example "Setup a development build 
grid".

== Download

The latest version of DTR can be found at

* http://github.com/xli/dtr/tree/master

== Installation

=== Normal Installation

You can install DTR with the following command.

  % ruby install.rb

from its distribution directory.

=== GEM Installation

Download and install DTR with the following.

   gem install --remote dtr

=== Running the DTR Test Suite

If you wish to run the unit and functional tests that come with DTR:

* CD into the top project directory of dtr.
* Type the following:

   rake # You need a version of rake installed

== Simple Example

Once installed, you can run DTR server anywhere:

  % dtr -s
  
If you are running Runner Agent on remote machine, please specify the DTR server machine ip:

  % dtr -s --server_address dtr_server_ip

After server started, you can run DTR runner agent at your project directory as follows:

  % dtr --server_address dtr_server_ip -r runner_name

Type "dtr --help" for an up-to-date option summary.
Invoking <tt>dtr</tt> without any options causes dtr to show help too.

Most of time your project test suite need setup environment before run tests, you
can set setup command by option '--setup', for example:

  % dtr --server_address dtr_server_ip -r runner1 --setup "rake db:test:prepare"
  
At last, you need to add 'dtr/test_unit_injection.rb' into test_files of your test 
task in your Rakefile, and for load it, you also need add dtr lib path:
  
  require 'dtr'

  DTR.broadcast_list = ['dtr server ip']
  
  Rake::TestTask.new(:dtr_tests) do |t|
    t.libs << DTR.lib_path
    t.test_files = FileList['dtr/test_unit_injection.rb', 'test/*test.rb']
    t.warning = false
    t.verbose = false
  end

In the case above we changed dtr broadcast list for listening remote dtr server.
And you also can use *DTR.port = 1234* to change the port listening. These two
options would be cached in the directory running the test or any other dtr processes
(e.g. dtr runner agent or dtr server).

== Run tests in multi-processes on one machine

For running Runner in multi-processes.
The following is the test task example in the rake file:

  require 'dtr/raketasks'

  DTR::Task.new :test do |t|
    t.test_files = FileList['test/*test.rb']
    t.processes = 2 #default is 2
  end

=== Runner Agent

* Clone repository from M1 to M2 in home directory: hg clone http: //M1_IP:8000/pet_store
* Start runner agent in the directory ~/pet_store on M2: rake --rakefile dtr_tasks.rake dtr:runner_agent
* Start runner agent on M3 same with above.

=== Run DTR Master on M1

* Commit all changes into Mercurial
* rake --rakefile dtr_tasks.rake dtr
* After you started the DTR Master, you can type the following to monitor the DTR Server status: dtr -a $DEV_BUILD_SERVER -m
* For output into console, open the debug option: dtr -a $DEV_BUILD_SERVER -d -m

== Credits

[<b>Josh Price</b>] For fixing tests packer in release 0.0.1.

[<b>Wang Pengchao</b>] For sharing lots of ideas.

[<b>Barrow H Kwan</b>] For patch of specifying DTR server port.

[<b>Mingle team</b>(http://studios.thoughtworks.com/mingle-project-intelligence)] For making all these happen.

== License

DTR is available under an Apache License Version 2.

== Support

Feel free to submit commits or feature requests.  If you send a patch,
remember to update the corresponding unit tests.  If fact, I prefer
new feature to be submitted in the form of new unit tests.

For other information, feel free to contact mailto:iam@li-xiao.com.

== Usage

DTR client is invoked from the command line using:

   % dtr [<em>options</em> ...]

=== Options are:

  -p, --port PORT                  Port number DTR will listen to. Default is 3344.
  -r runner1_name,runner2_name     Start DTR test runner agent with unique runner names.
  -a, --server_address ADDRESS     Specify dtr server address, domain name or ip address, e.g. 192.168.0.1. Default is 'localhost'.
  -i, --setup COMMAND              Set command for initializing test runner test environment, e.g. 'rake db:test:prepare'. Default is do nothing.
  -m, --monitor                    Monitor the status of the dtr rinda server, e.g. dtr -a 10.11.1.2 -m
  -b, --be_silent                  Only show error messages
  -d, --debug                      output debug log
  -v, --version                    Show version
  -h, --help                       Show this help doc

Type "dtr --help" for an up-to-date option summary.

= Other stuff

Author::  Li Xiao <iam@li-xiao.com>
Requires:: Ruby 1.8.5 or later
License::  Copyright 2007-2008 by Li Xiao.
           Released under an Apache License 2.  See the LICENSE file
           included in the distribution.

== Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
