#!/usr/bin/env ruby
require 'optparse'
require 'logger'
begin
  require 'dtr'
rescue LoadError
  require 'rubygems'
  require 'dtr'
end

NOTES = <<-NOTES
----------------
Notes: 
  * The default value of broadcast address is 'localhost'. If DTR Server start with 'localhost', it would not be found by remote machine. If you run the runner agent on remote machine, you should start the server and runner agent with same server address specified, e.g. dtr -s -a 10.18.255.255, dtr -r r1,r2 -a 10.18.255.255
  * Runners specified by -r option will be started in different processes by the runner agent.

DTR is a distributed test runner program for decreasing time of running ruby tests based on ruby 'test/unit' package.
For additional information, see http://dtr.rubyforge.org/
NOTES

opts = OptionParser.new do |opts|
  opts.banner = "DTR usage: #{$0} [options]"
  opts.separator ""
  opts.separator "Synopsis:"
  opts.separator "dtr -s"
  opts.separator "dtr -r runner1_name,runner2_name"
  opts.separator "dtr -a broadcast_ip -m"
  opts.separator ""
  opts.separator "Options:"
  
  opts.on_tail("-m", "--monitor", "Monitor the status of the dtr agents.") do
  end

  opts.on("-p", "--port PORT",  "Port number of DTR rinda server. Default is 3344.") do |port|
    DTR.port = port
  end
  
  opts.on("-r runner1_name,runner2_name", Array, "Start DTR test runner agent with unique runner names.") do |names|
    DTR_AGENT_OPTIONS[:runners] = names.collect{|name| name.untaint}
  end
  
  opts.on("-a", "--broadcast_address ADDRESS", "Specify broadcast address for looking up dtr rinda server, e.g. 192.168.255.255. Default is 'localhost'.") do |address|
    if (!address.nil?) && (!address.empty?)
      DTR.broadcast_list = [address]
    end
  end

  opts.on("-i", "--setup COMMAND", "Set command for initializing test runner test environment, e.g. 'rake db:test:prepare'. Default is do nothing.") do |command|
    DTR_AGENT_OPTIONS[:setup_env_cmd] = command.untaint
  end

  opts.on_tail("-d", "--debug", "output debug log") do
    DTR.logger.log_level = Logger::DEBUG
  end

  opts.on_tail("-b", "--be_silent", "Only show error messages") do
    DTR.logger.log_level = Logger::ERROR
  end

  opts.on_tail("-v", "--version", "Show version") do
    puts "dtr, version " + DTRVERSION
  end

  opts.on_tail("-h", "--help", "Show this help doc") do 
    puts opts
    puts NOTES
  end
end

no_argv = ARGV.empty?

opts.parse!

if no_argv
  puts opts
  puts NOTES
end

if DTR_AGENT_OPTIONS[:runners] && !DTR_AGENT_OPTIONS[:runners].empty?
  DTR.start_agent
end
