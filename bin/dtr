#!/usr/bin/env ruby
require 'optparse'
require 'logger'
begin
  require 'dtr'
rescue LoadError
  require 'rubygems'
  require 'dtr'
end

NOTES = <<-NOTES
----------------
Notes: 
  * The default value of broadcast address is 'localhost'. If DTR Server start with 'localhost', it would not be found by remote machine. If you run the runner agent on remote machine, you should start the server and runner agent with same server address specified, e.g. dtr -s -a 10.18.255.255, dtr -r r1,r2 -a 10.18.255.255
  * Runners specified by -r option will be started in different processes by the runner agent.
  * You need install gem daemons to use -D option.
  * When specify -D option, dtr_agent.pid/dtr_server.pid will be created in the directory to store the daemon process pid. And the output of the process will be print into *.output file.

DTR is a distributed test runner program for decreasing time of running ruby tests based on ruby 'test/unit' package.
For additional information, see http://dtr.rubyforge.org/
NOTES

opts = OptionParser.new do |opts|
  opts.banner = "DTR usage: #{$0} [options]"
  opts.separator ""
  opts.separator "Synopsis:"
  opts.separator "dtr -s"
  opts.separator "dtr -r runner1_name,runner2_name"
  opts.separator "dtr -a broadcast_ip -m"
  opts.separator ""
  opts.separator "Options:"
  
  opts.on_tail("-m", "--monitor", "Monitor the status of the dtr rinda server, e.g. dtr -a 10.11.255.255 -m") do
    DTROPTIONS[:monitor] = true
  end
  
  opts.on_tail("-b", "--be_silent", "Only show error messages") do
    DTROPTIONS[:log_level] = Logger::ERROR
  end

  opts.on("-p", "--port PORT",  "Port number DTR will listen to. Default is 3344.") do |port|
    	DTR.port = port
  end
  
  opts.on("-r runner1_name,runner2_name", Array, "Start DTR test runner agent with unique runner names.") do |names|
    DTROPTIONS[:names] = names.collect{|name| name.untaint}
  end
  
  opts.on("-a", "--broadcast_address ADDRESS", "Specify broadcast address for looking up dtr rinda server, e.g. 192.168.255.255. Default is 'localhost'.") do |address|
    if (!address.nil?) && (!address.empty?)
      DTR.broadcast_list = [address]
    end
  end

  opts.on("-i", "--setup COMMAND", "Set command for initializing test runner test environment, e.g. 'rake db:test:prepare'. Default is do nothing.") do |command|
    DTROPTIONS[:setup] = command.untaint
  end
  
  opts.on_tail("-D", "--daemon", "Start server/agent in daemon mode. Gem 'daemons' must be installed") do
    DTROPTIONS[:daemon] = true
  end
  
  opts.on_tail("-R", "--stop_agent", "Stop agent run in daemon mode.") do
    DTR.stop_agent_daemon_mode
  end
  
  opts.on_tail("-d", "--debug", "output debug log") do
    DTROPTIONS[:log_level] = Logger::DEBUG
  end
  
  opts.on_tail("-v", "--version", "Show version") do
    puts "dtr, version " + DTRVERSION
  end

  opts.on_tail("-h", "--help", "Show this help doc") do 
    puts opts
    puts NOTES
  end
end

no_argv = ARGV.empty?

opts.parse!

if no_argv
  puts opts
  puts NOTES
end

if DTROPTIONS[:names]
  if DTROPTIONS[:daemon]
    DTR.start_agent_daemon_mode
  else
    DTR.start_agent
  end
end

if DTROPTIONS[:monitor]
  if DTROPTIONS[:daemon]
    puts "Can't start monitor with daemon mode."
  else
    DTR.monitor
  end
end